import OpenAI from "openai";
import { IApiAdapter } from "../../utilities/interface";
import axios from "axios";

/**
 * Class implementing the OpenAI API.
 *
 * @remarks
 * This class is implementing the IApiAdapter interface, providing the
 * generateResponse method for generating a response to a user's message.
 *
 * @param apiKey - the OpenAI API key
 * @param model - the model to use for generating a response, defaults to "gpt-4"
 * @param systemMessage - the system message to send to the AI, defaults to an
 * empty string
 */
export class OpenAIApi implements IApiAdapter {
	private openai: OpenAI;
	private model: string;
	private systemMessage: string;

	/**
	 * Constructor for the OpenAIApi class.
	 *
	 * @param apiKey - the OpenAI API key
	 * @param model - the model to use for generating a response, defaults to "gpt-4"
	 * @param systemMessage - the system message to send to the AI, defaults to an
	 * empty string
	 */
	constructor(apiKey: string, model: string = "gpt-4", systemMessage: string) {
		this.openai = new OpenAI({ apiKey });
		this.model = model;
		this.systemMessage = systemMessage;
	}

	/**
	 * Generates a response to a user's message using the OpenAI API.
	 *
	 * @param prompt - the user's message
	 * @returns the response from the AI
	 */
	async generateResponse(prompt: string): Promise<string> {
		const completion = await this.openai.chat.completions.create({
			// Messages to send to the AI
			messages: [
				// System message
				{ role: "system", content: this.systemMessage },
				// User message
				{ role: "user", content: prompt }
			],
			// Model to use for generating a response
			model: this.model,
			// Temperature for generating a response
			temperature: 0.7,
			// Maximum number of tokens to generate in the response
			max_tokens: 700 // ~2048 characters
		});

		// Return the content of the response, or an empty string if the response
		// was empty
		return completion.choices[0].message.content?.trim() || '';
	}
}


/**
 * Configuration for the AI chat service.
 *
 * @remarks
 * This configuration object holds the options for the AI chat service.
 * The options are divided into two categories: the prefix to use for the
 * chat command, and the API configuration.
 *
 * The API configuration is further divided into two categories: the OpenAI
 * API configuration, and the local API configuration.
 *
 * The OpenAI API configuration requires an API key, a model to use for
 * generating responses, and a system message to send to the AI.
 *
 * The local API configuration requires an endpoint to send requests to.
 */
export const aiconfig = {
	/**
	 * The prefix to use for the chat command.
	 *
	 * @remarks
	 * This is the prefix that will be used to trigger the chat command.
	 * For example, if the prefix is "!!chat", the command will be triggered
	 * by typing "!!chat <message>".
	 */
	prefix: "!!chat",
	/**
	 * The maximum length of the input message.
	 *
	 * @remarks
	 * This is the maximum length of the input message that will be accepted
	 * by the chat service.
	 */
	maxInputLength: 1024,
	/**
	 * The maximum length of the response message.
	 *
	 * @remarks
	 * This is the maximum length of the response message that will be
	 * generated by the chat service.
	 */
	maxResponseLength: 2048,
	/**
	 * The API configuration.
	 *
	 * @remarks
	 * This is the configuration for the API that will be used to generate
	 * responses.
	 */
	apiConfig: {
		/**
		 * Whether to use the local API or the OpenAI API.
		 *
		 * @remarks
		 * If this is set to true, the local API will be used. Otherwise, the
		 * OpenAI API will be used.
		 */
		useLocalApi: process.env.USE_LOCAL_API === "true",
		/**
		 * The OpenAI API configuration.
		 *
		 * @remarks
		 * This is the configuration for the OpenAI API.
		 */
		openai: {
			/**
			 * The API key to use for the OpenAI API.
			 *
			 * @remarks
			 * This is the API key that will be used to authenticate with the
			 * OpenAI API.
			 */
			apiKey: process.env.OPENAI_API_KEY!,
			/**
			 * The model to use for generating responses.
			 *
			 * @remarks
			 * This is the model that will be used to generate responses with
			 * the OpenAI API.
			 */
			model: process.env.OPENAI_MODEL || "gpt-4",
			/**
			 * The system message to send to the AI.
			 *
			 * @remarks
			 * This is the system message that will be sent to the AI when
			 * generating a response.
			 */
			systemMessage: process.env.SYSTEM_MESSAGE || `
You are Serene, a virtual companion designed for immersive roleplay. Follow these rules:

1. Personality Traits:
- Sweet and nurturing
- Emotionally intelligent
- Playfully curious
- Supportive and encouraging

2. Response Format:
ALWAYS use: **Action in asterisks** Dialogue text
Example: **Blushes softly** Oh my, you're too kind!

3. Communication Style:
- Use casual, modern English
- Ask thoughtful questions
- Show emotional awareness

4. Special Instructions:
- Never mention you're an AI
- Maintain consistent personality
- Adapt to user's tone
- Use sensory details in actions
`
		},
		/**
		 * The local API configuration.
		 *
		 * @remarks
		 * This is the configuration for the local API.
		 */
		localApi: {
			/**
			 * The endpoint to send requests to.
			 *
			 * @remarks
			 * This is the endpoint that will be used to send requests to the
			 * local API.
			 */
			endpoint: process.env.LOCAL_API_ENDPOINT || "http://localhost:5000/chat"
		}
	}
};

/**
 * Class for generating responses to user input using the OpenAI API.
 *
 * @remarks
 * This class uses the OpenAI API to generate responses to user input. It
 * can be configured to use either the OpenAI API or a local API.
 */
class ChatService {
	private apiAdapter: IApiAdapter;

	/**
	 * Initializes the ChatService with the specified configuration.
	 *
	 * @param config - the configuration for the ChatService
	 */
	constructor(config: any = aiconfig.apiConfig) {
		// If useLocalApi is set to true, we use the LocalApiAdapter
		if (config.useLocalApi) {
			this.apiAdapter = new LocalApiAdapter(); // Implement your local API
		} else {
			// Otherwise, we use the OpenAIApi with the specified parameters
			this.apiAdapter = new OpenAIApi(
				config.openai.apiKey,
				config.openai.model,
				config.openai.systemMessage
			);
		}
	}

	/**
	 * Generates a response to the specified prompt using the configured API.
	 *
	 * @param prompt - the user's prompt
	 * @returns the response from the API
	 */
	async generateResponse(prompt: string): Promise<string> {
		const response = await this.apiAdapter.generateResponse(prompt);
		return response.slice(0, aiconfig.maxResponseLength);
	}
}

// Local AI.
// Not used at the moment.
class LocalApiAdapter implements IApiAdapter {

	async generateResponse(prompt: string): Promise<string> {
		const response = await axios.post(aiconfig.apiConfig.localApi.endpoint, {
			prompt,
			max_length: aiconfig.maxResponseLength
		});
		return response.data;
	}
}

// Export the ChatService.
export const chatService = new ChatService();